#!/bin/sh

#
# License
#
# GNU Affero General Public License Version 3.0, https://www.gnu.org/licenses/agpl-3.0.en.html
#

usage(){

cat <<EOF

$0 <running container> [-x] -d <dynamically linked> -f <files and dirs> -r <files to remove> -u user <files to chown to user>" 

      -x Activates debugging
      -d Files are considered dynamically linked
         All library dependencies are resolved using ldd 
         and necessary file are included
      -f Files and directories to include. Don't forget the license files
      -r Files to be removed before taring, especially log files
      -u User:Group files should be chowned to, access right will be set to rw  

The container needs a usable version of sh, tar, ldd, sed, rm and uniq

      License is
      GNU Affero General Public License Version 3.0, https://www.gnu.org/licenses/agpl-3.0.en.html

EOF

}

#
# create the tar command to be run in the container
# the arguments to tar are defined by the extract command
#
# this command is running IN the container and is defined
# in extract_function.sh
#
create_tar_command(){
  cat extract_function.sh
  echo tar cf /dev/stdout -C / \$\(extract  $* \) 
}

#
# creates a Dockerfile inspecting the running container
#
create_dockerfile(){

  echo FROM scratch

  echo ADD ${CONTAINER}-hard.tar /

  docker inspect static   -f '{{range $k, $v := .Config.ExposedPorts}}{{printf "EXPOSE %s\n" $k}}{{end}}' | cut -d/ -f1

  #docker inspect --format "USER {{.Config.User}}"  static | cut -d: -f1

  WORKDIR=$(docker inspect --format "WORKDIR {{.Config.WorkingDir}}" $CONTAINER)
  if [ "$WORKDIR" = "WORKDIR" ] 
  then
    echo $WORKDIR
  fi

  #docker inspect --format "ENTRYPOINT {{json .Args}}" $CONTAINER
 
  docker inspect --format "ENTRYPOINT {{json .Config.Entrypoint}}"  $CONTAINER
}

if [ "$#" -eq "0" ] 
then 
  usage 
  exit 1
fi

if [ "$#" -eq "1" ]
then
  usage
  if [ "$1" = "-h" ]
  then 
    exit 0
  else
    exit 1
  fi    
fi


CONTAINER=$1
shift

create_tar_command $* |  docker exec -i  $CONTAINER sh > ${CONTAINER}-hard.tar

if [ -f Dockerfile-${CONTAINER}-hard ]
then
	echo using existing Dockerfile-${CONTAINER}-hard
else
	echo generating new Dockerfile-${CONTAINER}-hard
fi

create_dockerfile   > Dockerfile-${CONTAINER}-hard

docker build . -f Dockerfile-${CONTAINER}-hard -t ${CONTAINER}-hard
